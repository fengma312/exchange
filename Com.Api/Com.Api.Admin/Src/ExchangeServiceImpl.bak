using Com.Bll;
using Com.Db;

using Grpc.Core;
using GrpcExchange;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Logging.Abstractions;
using Newtonsoft.Json;


namespace Com.Api.Admin;

/// <summary>
/// gRPC服务实现
/// </summary>
public class GreeterImpl : ExchangeService.ExchangeServiceBase
{

    /// <summary>
    /// 一元方法
    /// </summary>
    /// <param name="request">请求参数</param>
    /// <param name="context">上下文</param>
    /// <returns></returns>
    public override async Task<Response> UnaryCall(Request request, ServerCallContext context)
    {
        Response reply = new Response();
        // ResCall<string> res = new ResCall<string>();
        // res.code = E_Res_Code.ok;
        // ReqCall<string>? req = JsonConvert.DeserializeObject<ReqCall<string>>(request.Json);
        // if (req == null)
        // {
        //     res.code = E_Res_Code.fail;
        //     res.msg = $"grpc 请求参数为空:{request.Json}";
        //     this.service_base.logger.LogError($"grpc 请求参数为空:{request.Json}");
        //     reply.Message = JsonConvert.SerializeObject(res);
        //     return reply;
        // }
        // res.op = req.op;
        // res.market = req.market;
        // res.data = req.data;
        // if (req.op == E_Op.service_get_status || req.op == E_Op.service_start || req.op == E_Op.service_stop)
        // {
        //     Market? marketInfo = JsonConvert.DeserializeObject<Market>(req.data);
        //     if (marketInfo == null)
        //     {
        //         res.code = E_Res_Code.fail;
        //         res.msg = $"服务(失败):获取服务状态,未获取到请求参数:{request.Json}";
        //         this.service_base.logger.LogError($"服务(失败):获取服务状态,未获取到请求参数:{request.Json}");
        //         reply.Message = JsonConvert.SerializeObject(res);
        //         return reply;
        //     }
        //     if (req.op == E_Op.service_get_status)
        //     {
        //         marketInfo = FactoryMatching.instance.ServiceGetStatus(marketInfo);
        //         res.data = JsonConvert.SerializeObject(marketInfo);
        //         res.msg = $"服务(成功):获取服务状态:{marketInfo.market}";
        //         this.service_base.logger.LogInformation($"服务(成功):获取服务状态:{marketInfo.market}");
        //     }
        //     else if (req.op == E_Op.service_start)
        //     {
        //         marketInfo = FactoryMatching.instance.ServiceStart(marketInfo);
        //         res.data = JsonConvert.SerializeObject(marketInfo);
        //         res.msg = $"服务(成功):启动服务:{marketInfo.market}";
        //         this.service_base.logger.LogInformation($"服务(成功):启动服务:{marketInfo.market}");
        //     }
        //     else if (req.op == E_Op.service_stop)
        //     {
        //         marketInfo = FactoryMatching.instance.ServiceStop(marketInfo);
        //         res.data = JsonConvert.SerializeObject(marketInfo);
        //         res.msg = $"服务(成功):关闭服务:{marketInfo.market}";
        //         this.service_base.logger.LogInformation($"服务(成功):关闭服务:{marketInfo.market}");
        //     }
        // }
        // else
        // {
        //     //其它操作
        // }
        // reply.Message = JsonConvert.SerializeObject(res);
        // await Task.CompletedTask;
        return reply;
    }

    /// <summary>
    /// 服务器流式处理方法
    /// </summary>
    /// <param name="request"></param>
    /// <param name="responseStream"></param>
    /// <param name="context"></param>
    /// <returns></returns>
    public override async Task StreamingFromServer(Request request, IServerStreamWriter<Response> responseStream, ServerCallContext context)
    {
        // while (!context.CancellationToken.IsCancellationRequested)
        // {
        //     await responseStream.WriteAsync(new Response());
        //     await Task.Delay(TimeSpan.FromSeconds(1), context.CancellationToken);
        // }


        var channel = System.Threading.Channels.Channel.CreateUnbounded<Response>();
        var consumerTask = Task.Run(async () =>
        {
            // Consume messages from channel and write to response stream.
            await foreach (var message in channel.Reader.ReadAllAsync())
            {
                await responseStream.WriteAsync(message);
                // await channel.Writer.WriteAsync(message);                
            }
        });
        var dataChunks = request.ContentReq.Chunk(size: 10);
        await Task.WhenAll(dataChunks.Select(
            async c =>
            {
                var message = new Response { ContentRes = c.Length.ToString() };
                await channel.Writer.WriteAsync(message);
            }));

        channel.Writer.Complete();
        await consumerTask;
    }


    /// <summary>
    /// 客户端流式处理方法
    /// </summary>
    /// <param name="requestStream"></param>
    /// <param name="context"></param>
    /// <returns></returns>
    public override async Task<Response> StreamingFromClient(IAsyncStreamReader<Request> requestStream, ServerCallContext context)
    {
        await foreach (var message in requestStream.ReadAllAsync())
        {
            // ...
        }
        return new Response();
    }

    /// <summary>
    /// 双向流式处理方法
    /// </summary>
    /// <param name="requestStream"></param>
    /// <param name="responseStream"></param>
    /// <param name="context"></param>
    /// <returns></returns>
    public override async Task StreamingBothWays(IAsyncStreamReader<Request> requestStream, IServerStreamWriter<Response> responseStream, ServerCallContext context)
    {

        var readTask = Task.Run(async () =>
        {
            await foreach (var message in requestStream.ReadAllAsync())
            {
                // Process request.
                Console.WriteLine(message.ContentReq);
            }
        });
        // Send responses until the client signals that it is complete.
        while (!readTask.IsCompleted)
        {
            Response reply = new Response();
            reply.ContentRes = "服务端";
            await responseStream.WriteAsync(reply);
            await Task.Delay(TimeSpan.FromSeconds(1), context.CancellationToken);
        }



    }


}